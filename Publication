#include <iostream>
#include <string>
#include <stdexcept>

using namespace std;

class Publication {
public:
    string title;
    float price;

    Publication() : title(""), price(0.0) {}

    virtual void getData() {
        cout << "Enter title: ";
        getline(cin, title);

        cout << "Enter price: $";
        cin >> price;
        cin.ignore(); // Clear the newline character from the input buffer
    }

    virtual void displayData() const {
        cout << "Title: " << title << "\nPrice: $" << price << "\n";
    }
};

class Book : public Publication {
public:
    int pageCount;

    Book() : pageCount(0) {}

    void getData() override {
        try {
            Publication::getData(); // Call the base class method to get common data
            cout << "Enter page count: ";
            cin >> pageCount;

            // Check if page count is negative
            if (pageCount < 0) {
                throw invalid_argument("Page count cannot be negative.");
            }
        } catch (...) {
            // Catch any exception and set all data members to zero
            title = "";
            price = 0.0;
            pageCount = 0;

            throw; // Re-throw the exception after resetting values
        }
    }

    void displayData() const override {
        Publication::displayData(); // Call the base class method to display common data
        cout << "Page Count: " << pageCount << " pages\n";
    }
};

class Tape : public Publication {
public:
    float playingTime;

    Tape() : playingTime(0.0) {}

    void getData() override {
        try {
            Publication::getData(); // Call the base class method to get common data
            cout << "Enter playing time (in minutes): ";
            cin >> playingTime;

            // Check if playing time is negative
            if (playingTime < 0) {
                throw invalid_argument("Playing time cannot be negative.");
            }
        } catch (...) {
            // Catch any exception and set all data members to zero
            title = "";
            price = 0.0;
            playingTime = 0.0;

            throw; // Re-throw the exception after resetting values
        }
    }

    void displayData() const override {
        Publication::displayData(); // Call the base class method to display common data
        cout << "Playing Time: " << playingTime << " minutes\n";
    }
};

int main() {
    try {
        Book book;
        Tape tape;

        cout << "Enter book information:\n";
        book.getData();

        cout << "\nEnter tape information:\n";
        tape.getData();

        cout << "\nDisplaying book information:\n";
        book.displayData();

        cout << "\nDisplaying tape information:\n";
        tape.displayData();
    } catch (const exception& e) {
        cerr << "\nAn exception occurred: " << e.what() << ". Resetting all values to zero.\n";
    }

    return 0;
}
