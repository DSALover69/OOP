#include<iostream>
using namespace std;

class Complex {
public:
    float real;
    float img;

    Complex() {
        real = 0;
        img = 0;
    }

    Complex(float a, float b) {
        real = a;
        img = b;
    }

    Complex operator+(const Complex& c2) {
        Complex temp;
        temp.real = real + c2.real;
        temp.img = img + c2.img;
        return temp;
    }

    Complex operator*(const Complex& c2) {
        Complex temp;
        temp.real = real * c2.real;
        temp.img = img * c2.img;
        return temp;
    }

    void display() const {
        cout << "Result: " << real << " + " << img << "i" << endl;
    }

    // Overloaded stream insertion operator (<<)
    friend ostream& operator<<(ostream& output, const Complex& c);

    // Overloaded stream extraction operator (>>)
    friend istream& operator>>(istream& input, Complex& c);
};

ostream& operator<<(ostream& output, const Complex& c) {
    output << c.real << " + " << c.img << "i";
    return output;
}

istream& operator>>(istream& input, Complex& c) {
    cout << "Enter real part: ";
    input >> c.real;
    cout << "Enter imaginary part: ";
    input >> c.img;
    return input;
}

int main() {
    Complex obj1, obj2;

    cout << "Enter the first complex number:" << endl;
    cin >> obj1;

    cout << "Enter the second complex number:" << endl;
    cin >> obj2;

    cout << "The addition of 2 complex numbers is " << obj1 + obj2 << endl;

    cout << "The multiplication of 2 complex numbers is " << obj1 * obj2 << endl;

    return 0;
}
