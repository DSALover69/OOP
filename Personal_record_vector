#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// User-defined structure for personal records
struct Person {
    string name;
    string dob;
    string phoneNumber;
};

// Function to display a person's details
void displayPerson(const Person& person) {
    cout << "Name: " << person.name << "\n";
    cout << "Date of Birth: " << person.dob << "\n";
    cout << "Phone Number: " << person.phoneNumber << "\n\n";
}

// Function to compare two Person objects for sorting
bool compareByName(const Person& a, const Person& b) {
    return a.name < b.name;
}

int main() {
    vector<Person> records;

    // Menu-driven program
    while (true) {
        cout << "1. Add Record\n";
        cout << "2. Display Records\n";
        cout << "3. Sort Records by Name\n";
        cout << "4. Search Record by Name\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";

        int choice;
        cin >> choice;

        switch (choice) {
            case 1: {
                Person newPerson;
                cout << "Enter Name: ";
                cin >> newPerson.name;
                cout << "Enter Date of Birth: ";
                cin >> newPerson.dob;
                cout << "Enter Phone Number: ";
                cin >> newPerson.phoneNumber;
                records.push_back(newPerson);
                break;
            }
            case 2: {
                cout << "Displaying Records:\n";
                for (const auto& person : records) {
                    displayPerson(person);
                }
                break;
            }
            case 3: {
                sort(records.begin(), records.end(), compareByName);
                cout << "Records sorted by name.\n";
                break;
            }
            case 4: {
                string searchName;
                cout << "Enter Name to search: ";
                cin >> searchName;

                auto it = find_if(records.begin(), records.end(),
                                  [&searchName](const Person& p) {
                                      return p.name == searchName;
                                  });

                if (it != records.end()) {
                    cout << "Record found:\n";
                    displayPerson(*it);
                } else {
                    cout << "Record not found.\n";
                }
                break;
            }
            case 5:
                cout << "Exiting program.\n";
                return 0;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    }

    return 0;
}
